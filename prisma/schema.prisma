generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Album {
  AlbumId  Int     @id @default(autoincrement())
  Title    String
  ArtistId Int
  artist   Artist  @relation(fields: [ArtistId], references: [ArtistId], onDelete: NoAction, onUpdate: NoAction)
  tracks   Track[]

  @@index([ArtistId], map: "IFK_AlbumArtistId")
}

model Artist {
  ArtistId Int     @id @default(autoincrement())
  Name     String?
  albums   Album[]
}

model Customer {
  CustomerId   Int       @id @default(autoincrement())
  FirstName    String
  LastName     String
  Company      String?
  Address      String?
  City         String?
  State        String?
  Country      String?
  PostalCode   String?
  Phone        String?
  Fax          String?
  Email        String
  SupportRepId Int?
  employee     Employee? @relation(fields: [SupportRepId], references: [EmployeeId], onDelete: NoAction, onUpdate: NoAction)
  invoices     Invoice[]

  @@index([SupportRepId], map: "IFK_CustomerSupportRepId")
}

model Employee {
  EmployeeId      Int        @id @default(autoincrement())
  LastName        String
  FirstName       String
  Title           String?
  ReportsTo       Int?
  BirthDate       DateTime?
  HireDate        DateTime?
  Address         String?
  City            String?
  State           String?
  Country         String?
  PostalCode      String?
  Phone           String?
  Fax             String?
  Email           String?
  customers       Customer[]
  employee        Employee?  @relation("employeesToemployees", fields: [ReportsTo], references: [EmployeeId], onDelete: NoAction, onUpdate: NoAction)
  other_employees Employee[] @relation("employeesToemployees")

  @@index([ReportsTo], map: "IFK_EmployeeReportsTo")
}

model Gener {
  GenreId Int     @id @default(autoincrement())
  Name    String?
  tracks  Track[]
}

model Invoice_Item {
  InvoiceLineId Int     @id @default(autoincrement())
  InvoiceId     Int
  TrackId       Int
  UnitPrice     Decimal
  Quantity      Int
  track         Track   @relation(fields: [TrackId], references: [TrackId], onDelete: NoAction, onUpdate: NoAction)
  invoice       Invoice @relation(fields: [InvoiceId], references: [InvoiceId], onDelete: NoAction, onUpdate: NoAction)

  @@index([TrackId], map: "IFK_InvoiceLineTrackId")
  @@index([InvoiceId], map: "IFK_InvoiceLineInvoiceId")
}

model Invoice {
  InvoiceId         Int            @id @default(autoincrement())
  CustomerId        Int
  InvoiceDate       DateTime
  BillingAddress    String?
  BillingCity       String?
  BillingState      String?
  BillingCountry    String?
  BillingPostalCode String?
  Total             Decimal
  customer          Customer       @relation(fields: [CustomerId], references: [CustomerId], onDelete: NoAction, onUpdate: NoAction)
  invoice_items     Invoice_Item[]

  @@index([CustomerId], map: "IFK_InvoiceCustomerId")
}

model Media_Type {
  MediaTypeId Int     @id @default(autoincrement())
  Name        String?
  tracks      Track[]
}

model Playlist_Track {
  PlaylistId Int
  TrackId    Int
  track      Track    @relation(fields: [TrackId], references: [TrackId], onDelete: NoAction, onUpdate: NoAction)
  playlists  Playlist @relation(fields: [PlaylistId], references: [PlaylistId], onDelete: NoAction, onUpdate: NoAction)

  @@id([PlaylistId, TrackId])
  @@index([TrackId], map: "IFK_PlaylistTrackTrackId")
}

model Playlist {
  PlaylistId      Int              @id @default(autoincrement())
  Name            String?
  playlist_tracks Playlist_Track[]
}

model Track {
  TrackId         Int              @id @default(autoincrement())
  Name            String
  AlbumId         Int?
  MediaTypeId     Int
  GenreId         Int?
  Composer        String?
  Milliseconds    Int
  Bytes           Int?
  UnitPrice       Decimal
  invoice_items   Invoice_Item[]
  playlist_tracks Playlist_Track[]
  album           Album?           @relation(fields: [AlbumId], references: [AlbumId], onDelete: NoAction, onUpdate: NoAction)
  genre           Gener?           @relation(fields: [GenreId], references: [GenreId], onDelete: NoAction, onUpdate: NoAction)
  media_type      Media_Type       @relation(fields: [MediaTypeId], references: [MediaTypeId], onDelete: NoAction, onUpdate: NoAction)

  @@index([MediaTypeId], map: "IFK_TrackMediaTypeId")
  @@index([GenreId], map: "IFK_TrackGenreId")
  @@index([AlbumId], map: "IFK_TrackAlbumId")
}
